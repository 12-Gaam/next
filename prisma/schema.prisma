generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CountryMaster {
  id        String        @id @default(cuid())
  name      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  contacts  Contact[]
  states    StateMaster[]
}

model StateMaster {
  id        String        @id @default(cuid())
  name      String
  countryId String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  cities    CityMaster[]
  contacts  Contact[]
  country   CountryMaster @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model CityMaster {
  id        String      @id @default(cuid())
  name      String
  stateId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  state     StateMaster @relation(fields: [stateId], references: [id], onDelete: Cascade)
}

model EducationMaster {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contacts  Contact[]
}

model ProfessionMaster {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contacts  Contact[]
}

model Contact {
  id               String            @id @default(cuid())
  firstname        String
  middlename       String?
  lastname         String?            @default("Patel")
  spouseFirstName  String?
  spouseMiddleName String?
  spouseLastName   String?
  fatherFirstName  String?           @default("")
  fatherMiddleName String?
  fatherLastName   String?
  motherFirstName  String?           @default("")
  motherMiddleName String?
  motherLastName   String?
  gender           String
  maritalStatus   String?
  is18Plus        Boolean?           @default(false)
  gaam             String
  currentAddress   String
  countryId        String?
  country          CountryMaster?    @relation(fields: [countryId], references: [id])
  stateId          String?
  state            StateMaster?      @relation(fields: [stateId], references: [id])
  cityId           String?
  phone            String            @unique
  countryCode      String?           @default("+1")
  email            String?           @unique
  dob              DateTime?
  educationId      String?
  education        EducationMaster?  @relation(fields: [educationId], references: [id])
  otherEducation   String?
  professionId     String?
  profession       ProfessionMaster? @relation(fields: [professionId], references: [id])
  otherProfession  String?
  website          String?
  profilePic       String?
  familyPhoto      String?
  fb               String?
  linkedin         String?
  insta            String?
  tiktok           String?
  twitter          String?
  snapchat         String?
  children         ContactChild[]
  siblings         ContactSibling[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model ContactChild {
  id         String  @id @default(cuid())
  contactId  String
  contact    Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  firstName  String?  @default("")
  middleName String?
  lastName   String?
  gender     String
  age        Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ContactSibling {
  id        String  @id @default(cuid())
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  firstName String?  @default("")
  middleName String?
  lastName  String?
  gender    String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
